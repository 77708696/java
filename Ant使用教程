http://www.ibm.com/developerworks/cn/java/j-lo-ant-eclipse/
http://blog.csdn.net/lujar/article/details/1549478

http://ant.apache.org/bindownload.cgi 下载

<?xml version="1.0"?>
   <!--定义project文件的文件名与默认执行目标-->
   <project default="dist" name="Socket Client">
     <!--添加描述-->
     <description>A simple Java project</description>
     <!--添加属性,相当于文件级的全局变量,此处用于设置目录名称-->
     <property name="srcDir" location="src" />
     <property name="buildDir" location="build" />
   	  <property name="build.classes" value="${buildDir}/classes" />
     <property name="distDir" location="dist" />

     <!--创建目标,操作为创建文件夹-->
   <target name="init">
         <tstamp />
         <mkdir dir="${buildDir}" />
   	     <mkdir dir="${build.classes}" />
         <mkdir dir="${distDir}" />
   </target>
   <!--创建目标compile,操作为编译src目录下的.java文件并输出.class文件到build目录-->
   <target name="compile" depends="init">
   	<javac
   	                  srcdir="${srcDir}"
   	                  destdir="${build.classes}"
   	                  deprecation="true"
   	                  failonerror="true" debug="true" includeantruntime="on" classpath="../lib/mina-core-2.0.9.jar">
   	            </javac>
   </target>
   <!--创建目标dist,操作为打包.class文件并输出到dist目录,打包.java文件并输出到dist目录-->
   <target name="dist" depends="compile">
      <jar destfile="${distDir}/example-${DSTAMP}.jar" basedir="${build.classes}">
                  <!--创建清单-->
                 <manifest>
                          <attribute name="Built-By" value="${user.name}" />
                 	      <attribute name="Class-Path" value="../lib/mina-core-2.0.9.jar ../lib/slf4j-api-1.7.7.jar ../lib/slf4j-nop-1.7.10.jar"/>
                          <attribute name="Main-Class" value="example_socket_client.Main" />
                 </manifest>
            </jar>

            <jar destfile="${distDir}/package-src-${DSTAMP}.jar" basedir="${srcDir}" />
      </target>
      <!--创建目标clean,操作为清空build与dist目录-->
      <target name="clean">
                   <_delete dir="${buildDir}" />
                   <_delete dir="${distDir}" />
      </target>
 
      </project>
      
      
      <?xml version="1.0" encoding="GBK" ?>
<!-- ===================================== -->
<!-- 张楠 2010/01/12 -->
<!-- ===================================== -->

<!--default="clean"定义ant运行到target  clean这一步结束-->
<project name="projectName" default="clean" basedir="D:/work/projectName">
    <description>projectName系统发布</description>
    <!--属性设置-->
    <property environment="env" />
    <property name="src.dir" value="${basedir}/src" />
    <property name="jar.file" value="projectName.jar" />
    <property name="java.lib.dir" value="${env.JAVA_HOME}/lib" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="classes.dir" value="${build.dir}/classes" />
    <property name="dist.dir" value="D:/contrib" />
        
    <!-- 基本编译路径设置 定义多个classpath-->
    <path id="compile.classpath">
        <fileset dir="${java.lib.dir}">
            <include name="tools.jar" />
        </fileset>
        <fileset dir="D:/contrib">
            <include name="*.jar" />
        </fileset>
    </path>
    
    <!-- 运行路径设置 -->
    <!--path id="run.classpath">
        <path refid="compile.classpath" />
        <pathelement location="${classes.dir}" />
    </path-->
    
    <!-- 排除java源文件的模式集 -->
    <patternset id="no.java">
        <exclude name="**/*.java" />
    </patternset>
    
    <!-- 初始化,建立目录,将多个src目录复制到同一src目录，编译，打包完成后自动清除 -->
    <target name="init" description="初始化,建立目录,复制文件">
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${src.dir}" />
        <copy todir="${src.dir}">
                 <fileset dir="${basedir}/path1/src">
                <include name="**/*.java" />
             </fileset>
        </copy>
        <copy todir="${src.dir}">
             <fileset dir="${basedir}/path2/src">
              <include name="**/*.java" />
           </fileset>
        </copy>
        <copy todir="${src.dir}">
             <fileset dir="${basedir}/path3/src">
              <include name="**/*.java" />
           </fileset>
        </copy>
        <copy todir="${src.dir}">
             <fileset dir="${basedir}/path4/src">
              <include name="**/*.java" />
          </fileset>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}">
                <patternset refid="no.java" />
            </fileset>
        </copy>
    </target>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
长期推荐成都知名外企(英语好 C++ JAVA)
mail to:hot13399@163.com
[url]http://woshizn.iteye.com/blog/1195498[/url]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    <!-- 编译源文件-->
    <target name="compile" depends="init" description="编译源文件">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" source="1.5" target="1.5">
            <classpath refid="compile.classpath" />
        </javac>
    </target>
    
    <!-- 打包类文件 -->
    <target name="jar" depends="compile" description="打包类文件">
        <jar jarfile="${dist.dir}/${jar.file}" >
            <fileset dir="${classes.dir}" includes="**/*.*" />
        </jar>
    </target>
    
    <!-- 清理,删除临时目录 -->
    <target name="clean" depends="jar" description="清理,删除临时目录">
        <delete dir="${build.dir}" />
        <delete dir="${basedir}/.settings" />
        <delete dir="${src.dir}" />
        <delete dir="${basedir}/bin" />
        <echo level="info">清理完毕</echo>
    </target>
    
    <!-- 从打包后jar的文件里运行 -->
    <!--target name="runjar" depends="jar" description="运行jar">
        <java jar="${dist.dir}/${jar.file}" fork="yes" dir="${basedir}" />
    </target-->
    
    <!-- 运行 -->
    <!--target name="run" depends="compile" description="运行">
        <java classname="powerwind.Sample" fork="yes" dir="${basedir}">
            <classpath refid="run.classpath" />
            <arg line="${param.msg}" />
        </java>
    </target-->
</project>

 
